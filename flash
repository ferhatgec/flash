#!/usr/bin/env fla --b

// MIT License
// 
// Copyright (c) 2020-2021 Ferhat Geçdoğan All Rights Reserved.
// Distributed under the terms of the MIT License.
// 
//

// Check version of FlaScript (Required latest version)
except(version) : 0.3 -> { error("Install new version of FlaScript") print(newline) } version;

// Definitions
defin[Flash_Version] -> print(string) -> "0.1-beta-1" <-

defin[Slashn] -> print(newline) <-
defin[Input_Sign] -> print(string) -> " $# " <-

func -> Welcome() {
	print(colorized[:11, 35:]) -> "Welcome, " <-
	
	print(rcolorized[:1, 36:])
	print(spec) -> __USERNAME__ <-

	print(newline)
} Welcome;

// Reimplement to get time from /proc/uptime
func -> Uptime() {
	print(rcolorized[:1, 95:]) -> "Uptime: "  <-
	print(spec) -> __UPTIME__ <-

	print(newline)
} Uptime;

func -> HelpFunction() {
	print(colorized[:1, 33:]) -> "[GENERAL]" <-
	print(newline)
	
	print(rcolorized[:1, 95:])
	
	print(string) -> "uptime: Show uptime of system\n"
	
	print(string) -> "username: Show username\n"
	
	print(string) -> "version: Show version of FlaSh"
	print(colorized[:1, 0:]) -> "\n" <-
} HelpFunction;

func -> VersionFunction() {
	print(colorized[:11, 96:]) -> "Fegeya FlaSh Version: " <-
		
	print(rcolorized[:1, 91:])
		
	put[Flash_Version]
		
	print(newline)
	
	print(colorized[:1, 95:]) -> "Fegeya FlaScript Version: " <-
	
	print(rcolorized[:1, 92:])
	print(spec) -> FLASCRIPT_VERSION <-
	
	print(newline)
} VersionFunction;

func -> Execute() {
	/> Get reference of input word */
	executepp("FlaSh", var(input_word))
} Execute;

#title_function -> 
    if[find(var(input_word), "title ")] -> {
        @substring -> input_word -> title  <

        print(dynamic) -> set[title] -> var(input_word) <-

        @equal -> input_word ->    <
    } else -> {        
        /> Call Execute() (another command) </	
		func -> Execute()
    } <-
#title_function <-

#help_function ->
	if[var(input_word) == "help"] -> {
		func -> HelpFunction()
	} else -> {
        	statement[#title_function]        
	} <-
#help_function <-

#uptime ->
	if[var(input_word) == "uptime"] -> {
		func -> Uptime()
	} else -> {
		statement[#help_function]
	} <-
#uptime <-

#check_version ->
	if[var(input_word) == "version"] -> {
		func -> VersionFunction()
	} else -> { statement[#uptime] } <-
#check_version <-

#exit ->
	if[var(input_word) == "exit"] -> {
		print(string) -> "Bye..\n"
		
		exit(success)
	} else -> { statement[#check_version] } <-
#exit <-

#check_command ->
	if[var(input_word) == "username"] -> {
		print(spec) -> __USERNAME__ <-

		print(newline)
	} else -> {
		statement[#exit]		
	} <-
#check_command <-

#buffer_loop ->
	while[var(loopVal) == "3.14"] -> {
		func -> TerminalBuffer()
		
		/> Colorize input */
		print(rcolorized[:1, 92:])
		
		/> Get input </
		@input(string) -> input_word <
		
		/> Colorize output </
		print(rcolorized[:1, 31:])
		
		/> Check inputted value </
		statement[#check_command]
	} else -> {
		print(string) -> "Failed.\n"
	} <-
#buffer_loop <-


func -> TerminalBuffer() {
	print(rcolorized[:11, 96:])
	print(spec) -> __USERNAME__ <-
	
	print(rcolorized[:11, 92:])
	
	print("~>")
	
	print(rcolorized[:11, 93:])
	print(spec) -> __HOSTNAME__ <-

	print(" ~")
		
	print(rcolorized[:11, 94:])
	@echo -> current_dir <-
	
	print(rcolorized[:11, 97:])
	
	put[Input_Sign]
	
	print(" ")
	
} TerminalBuffer;
	
main() -> main {
    func -> Welcome()
	
	var(int) -> 3.14 -> loopVal <-
	var(string) -> blah blah -> input_word <- 
	var(string) -> (func) getenv -> "PWD" (end) -> current_dir <- 
	
	statement[#buffer_loop]
	
	print(newline)
} main;
